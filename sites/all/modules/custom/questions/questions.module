<?php


/**
* Implements hook_menu().
*/
function questions_menu() {
  
  $items['questions'] = array(
    'title' => 'Questions',
    'description' => 'Simple custom hook_menu() implementation.',
    'page callback' => 'questions_list',
    'access arguments' => array('access content'),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
  ); 
/*
  $items['add_question'] = array(
    'title' => 'Add Question',
    'description' => 'Add a question.',
    'access arguments' => array('add question'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('questions_add_form'),
    'type' => MENU_NORMAL_ITEM,
  );
  */
  $items['questions/%ctools_js/%'] = array(
    'page callback' => 'questions_callback',
    'page arguments' => array(1,2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['questions/view/%ctools_js/%/%'] = array(
    'page callback' => 'questions_view_callback',
    'page arguments' => array(2,3,4),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;

}

function questions_init() {
    //Customize modal window
    drupal_add_js(array(
    'questions-modal' => array(
      'modalSize' => array(
        'type' => 'fixed',
        'width' => 700,
        'height' => 500,
      ),
     //Animation mode
     'animation' => 'fadeIn',
    ),
  ), 'setting');
}


/*
 * Callback function.
 */
function questions_function(){
  return "QUESTIONS";
}

/**
 * Implements hook_permission().
 */
function question_permission(){
  return array(
    'access questions' => array(
      'title' => t('Access Questions Page.'),
      'description' => t('Access Questions Page on the site.'),
    ),
    'add question' => array(
      'title' => t('Add a Question.'),
      'description' => t('Add a new question in the Questions Page.'),
    ),
  );
}

/**
 *  Question form.
 */
function questions_add_form($form, $form_state){
  $form = array();
 

  $form['question'] = array(
    '#type' => 'textfield',
    '#title' => t('Question'),
    '#description' => t('Enter the question.'),
   // '#default_value' => $node->title,
    '#size' => 60,
    '#maxlength' => 255,
    '#required' => TRUE,
  );

  $form['category'] = array(
    '#type' => 'textfield',
    '#title' => t('Category'),
    '#description' => t('Enter a category for the question.'),
    '#size' => 60,
    '#maxlength' => 60,
    '#required' => TRUE,
  );

  $form['select'] = array(
    '#type' => 'radios',
    '#title' => t('Number of allowed answers.'),
    '#options' => array(0 => t('Single'), 1 => t('Multiple')),
    '#default_value' => 0,
  );

  $form['choices'] = array(
    '#type' => 'textfield',
    '#title' => t('Choices'),
    '#description' => t('Enter answer choices separated by comma.'),
    '#size' => 60,
    '#maxlength' => 255,
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add question'),
  );  

  return $form;
}

/**
 * Submit handler for question_form. Inserts entry into the database.
 */
function questions_add_form_submit($form, $form_state){
  global $user;
   
  $query = db_insert('questions')
    ->fields(array(
      'text' => $form_state['values']['question'],
      'category' => $form_state['values']['category'],
      'multiple' => $form_state['values']['select'],
      'uid_created' => $user->uid,
      'date_created' => date(time()),
    ))
    ->execute();

  $qid = db_query("SELECT qid FROM {questions} WHERE text = :text", array(':text' => $form_state['values']['question']))->fetchField();
  $choices = explode(',', $form_state['values']['choices']);

  foreach ($choices as $choice) {
    $query = db_merge('answers')
      ->key(array('text' => trim($choice)))
      ->execute();

    $aid = db_query("SELECT aid FROM {answers} WHERE text = :text", array(':text' => trim($choice)))->fetchField(); 
    $query = db_insert('questions_answers')
      ->fields(array('qid' => $qid, 'aid' => $aid))
      ->execute();
  }
  
  drupal_set_message(t('Question has been successfully added.'));
  // Tell the browser to close the modal.
 // $form_state['ajax_commands'][] = ctools_modal_command_dismiss();
}

/**
 *  Add answer form.
 */
function questions_add_answer_form($form, &$form_state){
 /* $question = db_query("SELECT * FROM {questions} WHERE qid = :qid", array(':qid' => $form_state['qid']))->fetchObject();

  $form['some_text'] = array(
    '#title' => t('Question'),
    '#markup' => $question->text,
    '#value' => 'wat',
  );

  $results = db_query("SELECT aid FROM {questions_answers} WHERE qid = :qid", array(':qid' => $form_state['qid'])); 
  $options = array();
  foreach ($results as $result) {
    $text = db_query("SELECT text FROM {answers} WHERE aid = :aid", array(':aid' => $result->aid))->fetchField();
    $options[$result->aid] = $text;
  }

  $form['answer'] = array(
    '#type' => 'select',
    '#title' => t('Select your answer.'),
    //'#description' => t('Select your preferred '),
    '#options' => $options,
    '#width' => 10,
    '#multiple' => $question->multiple
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  
  if ($form_state['submitted']) {
   // $commands[] = ctools_modal_command_dismiss();
    //$commands[] = ctools_ajax_command_redirect('questions/nojs/'.$question->qid);
    print ajax_render($commands);
    exit;
  }*/
  return $form;
}

function questions_add_answer_form_submit(&$form, &$form_state){
  global $user;
  $answers = array();

  is_array($form_state['values']['answer']) ? $answers = array_filter($form_state['values']['answer']) : array_push($answers, $form_state['values']['answer']);
  
  foreach ($answers as $answer) {
    $query = db_insert('questions_answers_users')
    ->fields(array(
      'qid' => $form_state['qid'],
      'aid' => $answer,
      'uid' => $user->uid,
      'date_added' => date(time())
    ))
    ->execute();
  }

  $form_state['rebuild'] = TRUE;
}

function questions_view_form($form, &$form_state){
  dpm($form_state['qid']);
  $question = db_query("SELECT * FROM {questions} WHERE qid = :qid", array(':qid' => $form_state['qid']))->fetchObject();
 // $attribute = '';
  $required = TRUE;
  $select_default = $question->multiple;

  switch ($form_state['operation']) {
    case 'view' :
      $link_text = 'Edit';
      $form_state['operation'] = 'edit';
      $attribute = 'readonly';
      $select_att = 'disabled';
      $description = '';
      $required = FALSE;
      break;

    case 'add' :
      $select_default = 0;
      break;
 
    case 'edit' :
      $link_text = 'Back';
      $form_state['operation'] = 'view';
      break;
  }

  $form['question'] = array(
    '#type' => 'textfield',
    '#title' => t('Question'),
    '#default_value' => $question->text,
    '#size' => 60,
    '#maxlength' => 255,
    '#required' => $required,
    '#attributes' => array($attribute => ''),
  );


  
  $form['category'] = array(
    '#type' => 'textfield',
    '#title' => t('Category'),
    '#default_value' => $question->category,
    '#size' => 60,
    '#maxlength' => 60,
    '#required' => $required,
    '#attributes' => array($attribute => ''),
  );

  $form['select'] = array(
    '#type' => 'radios',
    '#title' => t('Number of allowed answers.'),
    '#options' => array(0 => t('Single'), 1 => t('Multiple')),
    '#default_value' => $select_default,
    '#required' => $required,
    '#attributes' => array($select_att => ''),
  );

  //select * from answers, questions_answers where 

//  $question = db_query("SELECT * FROM {answers} WHERE qid = :qid", array(':qid' => $form_state['qid']))->fetchObject();
  $query = db_select('answers', 'a');
  $query->join('questions_answers', 'q', 'q.aid = a.aid');
  $results = $query
    ->fields('a', array('text'))
    ->condition('q.qid', $question->qid)
    ->execute();
    $answers = array();
  foreach ($results as $result)
    array_push($answers, $result->text);
  $answer_str = implode(', ', $answers);

  $form['choices'] = array(
    '#type' => 'textfield',
    '#title' => t('Choices'),
    '#description' => t('Enter answer choices separated by a comma.'),
    '#size' => 60,
    '#maxlength' => 255,
    '#required' => $required,
    '#default_value' => $answer_str,
    '#attributes' => array($attribute => ''),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    /*'#attributes' => array(
      'onclick' => 'javascript:var s=this;setTimeout(function(){s.value="Saving...";s.disabled=true;},1);',
    ),*/
  );  
  
/*
  $form['details'] = array(
    '#title' => t('Question'),
    '#markup' => 'Added by '.$question->uid_created.' on '.format_date($question->date_created),
  );
*/
  
  $form['link'] = array(
  '#markup' => l($link_text, 'questions/view/nojs/'.$form_state['operation'].'/'.$question->qid, array(
      'attributes' => array(
        'class' => array(
          'ctools-use-modal', 'ctools-modal-questions-modal')
        ),
      )
    )
  );
/*
  if ($form_state['submitted']) {
   // $commands[] = ctools_modal_command_dismiss();
    $commands[] = ctools_ajax_command_redirect('questions');
    print ajax_render($commands);
    exit;
  }
*/
  if ($form_state['submitted']) {
   // $commands[] = ctools_modal_command_dismiss();
    $form['actions']['submit']['#disabled'] = TRUE;
    $commands[] = ctools_ajax_command_redirect('questions');
    print ajax_render($commands);
    exit;
  }

  return $form;
}

function questions_view_form_submit(&$form, &$form_state){
  global $user;

  db_merge('questions')
    ->insertFields(array(
      'text' => $form_state['values']['question'],
      'category' => $form_state['values']['category'],
      'multiple' => $form_state['values']['select'],
      'uid_created' => $user->uid,
      'date_created' => date(time()),
    ))
    ->updateFields(array(
      'text' => $form_state['values']['question'],
      'category' => $form_state['values']['category'],
      'multiple' => $form_state['values']['select'],
      'uid_changed' => $user->uid,
      'date_changed' => date(time()),
    ))
    ->key(array('qid' => $form_state['qid']))
    ->execute();

  $qid = db_query("SELECT qid FROM {questions} WHERE text = :text", array(':text' => $form_state['values']['question']))->fetchField();
  $choices = explode(',', $form_state['values']['choices']);

  foreach ($choices as $choice) {
    db_merge('answers')
      ->key(array('text' => trim($choice)))
      ->execute();

    db_delete('questions_answers')
      ->condition('qid', $qid)
      ->execute();

    $aid = db_query("SELECT aid FROM {answers} WHERE text = :text", array(':text' => trim($choice)))->fetchField(); 
    $query = db_insert('questions_answers')
      ->fields(array('qid' => $qid, 'aid' => $aid))
      ->execute();
  }
    
  drupal_set_message(t('Question has been successfully added.'));
  $form_state['rebuild'] = TRUE;  
}

function questions_form_alter(&$form, $form_state, $form_id) {
  dpm($form_id);
  // if ($form_id == "questions_view_form") {
      $form['actions']['submit']['#submit'][] = 'questions_view_form_submit';  // }
}

function questions_list() {
  global $user;
  ctools_include('modal');
  ctools_modal_add_js();
  
  $header = array(
    'id' => array('data' => t('Id'), 'field' => 'q.qid'),
    'text' => array('data' => t('Question'), 'field' => 'q.text'),
    'category' => array('data' => t('Category'), 'field' => 'q.category'),
    'date_created' => array('data' => t('Date created'), 'field' => 'q.date_created'),
    'operations' => array('data' => t('Operations'), 'colspan' => 3),
  );

// Setting the sort conditions
  if (isset($_GET['sort']) && isset($_GET['order'])) {
    // Sort it Ascending or Descending?
    if($_GET['sort'] == 'asc')  $sort = 'ASC';
    else                        $sort = 'DESC';
 
    // Which column will be sorted
    switch($_GET['order']) {
      case 'Category':
        $order = 'category';
        break;
      case 'Text':
        $order = 'text';
        break;
      default:
        $order = 'category';
    }
  }
  else {
    $sort = 'ASC';
    $order = 'category';
  }

  $query = db_select('questions', 'q')
    ->extend('PagerDefault')
    ->extend('TableSort');

  $query->fields('q', array('qid', 'text', 'category', 'date_created'))
        ->limit(20)
        ->orderByHeader($header)
        ->orderBy($order, $sort);
  $results = $query->execute();

  $rows = array();
  foreach ($results as $result) {
    $rows[$result->qid] = array(
      $result->qid,
      $result->text,
      $result->category,
      format_date($result->date_created),
      l("View", 'questions/view/nojs/view/'.$result->qid, array(
        'attributes' => array(
          'class' => array(
            'ctools-use-modal', 'ctools-modal-questions-modal')
          ),
        )
      ),
      l("Add Answer", 'questions/nojs/'.$result->qid, array(
        'attributes' => array(
          'class' => array(
            'ctools-use-modal', 'ctools-modal-questions-modal')
          ),
        )
      )
    );

    if(isset($user->roles[3])){
      array_push($rows[$result->qid], l('Delete', 'questions/'.$result->qid));
    }
  }

  $output = theme('table', array('header' => $header, 'rows' => $rows ));  
  $output .= theme('pager');
  $output .= l("Add Question", 'questions/view/nojs/add/0', array(
        'attributes' => array(
          'class' => array(
            'ctools-use-modal', 'ctools-modal-questions-modal')
          ),
        )
      );

  
  $output .= isset($user->roles[3]);
  return $output;
}



/**
* Ajax menu callback.
*/
function questions_callback($ajax, $qid) {
  if ($ajax) {
    ctools_include('ajax');
    ctools_include('modal');

    $form_state = array(
      'ajax' => TRUE,
      'title' => t('MyModule Modal Form'),
      'qid' => $qid,
    );

    $output = ctools_modal_form_wrapper('questions_add_answer_form', $form_state);
    if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }

    print ajax_render($output);
    drupal_exit();
  }
  else {
    return drupal_get_form('questions_add_answer_form');
  }
}



/**
* Question modal callback.
*/
function questions_view_callback($ajax, $operation, $qid) {
  if ($ajax) {
    ctools_include('ajax');
    ctools_include('modal');
    
    $form_state = array(
      'ajax' => TRUE,
      'title' => ucwords($operation).' Question',
      'qid' => $qid,
      'operation' => $operation // 0-add, 1-view, 2-edit, 3-delete
    );

    $output = ctools_modal_form_wrapper('questions_view_form', $form_state);
    if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }
    print ajax_render($output);
    drupal_exit();
  }
  else {
    return drupal_get_form('questions_view_form');
  }
}


function questions_view_ajax_callback($form, &$form_state) {
  $commands = array();
  $commands[] = ajax_command_html('#after_ajax_element_wrapper', render($form['ajax_example']));
  $commands[] = ajax_command_alert(t('ajax_command_alert() is working'));
 
  $commands[] = array(
    'command' => 'afterAjaxCallbackExample',
    'selectedValue' => $form_state['values']['ajax_example'],
  );
 
  return array('#type' => 'ajax', '#commands' => $commands);
}