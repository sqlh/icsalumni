<?php

/*
 * Implements hook_menu().
 */
function report_menu(){ 
  $items['reports'] = array(
    'title' => 'report page',
    'description' => 'Generate report.',
    'page callback' => 'report_function', //_make_bar_chart',
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
  );  

  $items['questions/%ctools_js/%'] = array(
    'page callback' => 'questions_callback',
    'page arguments' => array(1,2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

   $items['ajax_link_callback/graph/%'] = array(
   'page callback' => 'ajax_link_response_graph',
   'page arguments' => array(2),
   'access callback' => 'user_access',
   'access arguments' => array('access content'),
   'type' => MENU_CALLBACK,
  );

   $items['reports/result'] = array(
    'page callback' => '_get_data',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['reports/main_data'] = array(
    'page callback' => '_get_main_data',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function _get_data() {
  $sex = $_POST['sex'];
  //$sex = ;

  if($_POST['qid'] != "--"){
    $results = db_select('question_answer', 'q')
      ->fields('q')
      ->condition('q.qid', $_POST['qid'])
      ->execute();

    $data = array();
    array_push($data, array("Option", "Number of Users"));
    foreach($results as $result){
      $query = db_select('question_answer_users', 'a');
      $query->join('users', 'u', 'u.uid = a.uid');
      $query->join('field_data_field_sex', 's', 's.entity_id = u.uid');
      $query->join('field_data_field_birthdate', 'b', 'b.entity_id = u.uid');
      $query->join('field_data_field_student_number', 'n', 'n.entity_id = u.uid');
      
      $query->fields('a')
            ->fields('s')
            ->fields('b')
            ->fields('n')
            ->condition('a.qid', $result->qid)
            ->condition('a.aid', $result->aid);


      // User specification
      if(count($sex) != 2)
        $query->condition('s.field_sex_value', $sex[0]);

      if($_POST['min_age'] != "")
        $query->where('FLOOR(DATEDIFF(NOW(),b.field_birthdate_value)/365.25) >= :min_age', array(':min_age' => $_POST['min_age']));
      
      if($_POST['max_age'] != "")
        $query->where('FLOOR(DATEDIFF(NOW(),b.field_birthdate_value)/365.25) <= :max_age', array(':max_age' => $_POST['max_age']));

      if($_POST['min_batch'] != "")
        $query->where('CAST(LEFT(n.field_student_number_value, 4) AS UNSIGNED) >= :min_batch', array(':min_batch' => $_POST['min_batch']));

      if($_POST['max_batch'] != "")
        $query->where('CAST(LEFT(n.field_student_number_value, 4) AS UNSIGNED) <= :max_batch', array(':max_batch' => $_POST['max_batch']));


      $count = $query->execute()->rowCount();
      $text = db_query("SELECT text FROM {answer} WHERE aid = :aid", array(':aid' => $result->aid))->fetchField();
      array_push($data, array($text, $count));
    }

    //$age = db_query("SELECT field_birthdate_value FROM {field_data_field_birthdate} WHERE entity_id = :entity_id", array(':entity_id' => 1))->fetchField();

   // $age = db_query("SELECT FLOOR(DATEDIFF(NOW(),field_birthdate_value)/365.25) AS age FROM {field_data_field_birthdate} WHERE entity_id = :entity_id", array(':entity_id' => 1))->fetchField();  

  }

  else{
    //return all users in site
  }

  drupal_json_output($data);

 /* And then simply use:

  data.value    data.emaillist    data.message 
  in your Javascript.*/
  //echo json_encode($messages);

}




function _get_main_data() {
  $category = $_POST['category'];
  
  $results = db_select('question', 'q')
    ->fields('q')
    ->condition('q.category', $category)
    ->execute();

  $data = array();
  foreach($results as $result){
    array_push($data, array($result->qid, $result->text));
  }

  drupal_json_output($data);
}
  
 


 function ajax_link_response_graph($ajax) {
  if ($ajax) {
   $output = _make_bar_chart();


   
 //  $output = 'Hey ! Some AJAX content !'
 
   $commands = array();
   $commands[] = ajax_command_replace('#myDiv', $output);
   $page = array('#type' => 'ajax', '#commands' => $commands);
   ajax_deliver($page);
  }
 else {
   $output = t("This is some content delivered via a page load.");
   return $output;
 }
}
 

function _make_bar_chart(){
 /* $query = db_select('questions', 'q');
  $results = $query
          ->fields('q')
          ->execute();

  $query = db_select('questions', 'q');
  $count1 = $query
    ->fields('q', array('category'))
    ->condition('q.category', 'lol')
    ->execute()
    ->rowCount(); 

  $query = db_select('questions', 'q');
  $count2 = $query
    ->fields('q', array('category'))
    ->condition('q.category', 'q')
    ->execute()
    ->rowCount(); â—‹

  $data = array();
 // foreach ($results as $result) {
    array_push($data, $count1);//$result->qid);
    array_push($data, $count2);
  //}
//Get the data into an array of values
//    foreach ($data as $value) {
        //array for pie chart, displaying just the last year
        $pie_data['chart']['pie'] = array(
            'header' => 'Header',
            'rows' => array($data), //the data to display
            'columns' => array('Data'),
            'chartType' => 'PieChart', //does what it says on the tin
            'options' => array(
                'title' => 'QID of Questions',
                'forceIFrame' => FALSE,
                'width' => 150,
                'height' => 200,
               // 'legend' => none, //no legend thanks
               // 'pieSliceText' => none, //stop text from displaying on the pie slices
                'fontSize' => 12,
                'enableInteractivity' => TRUE, //stop mouse overs on pie charts
                'backgroundColor' => 'transparent'
            )
        );
  
    $chart = array(
      '#plugin'    => 'google', // Google Charts API will be used
      '#type'     => 'line2D', // A simple line chart
      '#height'   => 100, // in pixels
      '#width'    => 200, // in pixels

       $values, // This is the contents of the array build above
    );*/
  
    //theme all the charts!
//drupal_add_js(drupal_get_path('module', 'mymodule') . '/jsapi.js');
  //  drupal_add_js(array('charts.js' => array('SOMEVARIABLE' => 'woohoo')), 'setting');
  
//drupal_add_js(array('report' => array('testvar' => $testVariable)), array('type' => 'setting'));
  drupal_add_js(drupal_get_path('module', 'report') . '/charts.js');
  return theme('report_chart_template');
}

function report_chart(){
  return "YSSAGANDA";
}
   

function report_function(){
    //theme all the charts!
  drupal_add_js(drupal_get_path('module', 'report') . '/jsapi.js');
  drupal_add_js(drupal_get_path('module', 'report') . '/report.js');
  drupal_add_css(drupal_get_path('module', 'report') . '/report.css');
  return theme('report_template');
} 
/*
 * Implementation of hook_theme().
 */
function report_theme(){
  return array(
    'report_template' => array(
      // template file name will be custom-page.tpl.php
      'template' => 'report-page',
    ),
    'report_chart_template' => array(
      // template file name will be custom-page.tpl.php
      'template' => 'report-chart-page',
    ),
  );
}